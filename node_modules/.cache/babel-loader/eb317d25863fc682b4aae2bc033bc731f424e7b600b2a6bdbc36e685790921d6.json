{"ast":null,"code":"var _jsxFileName = \"/home/volodya-work/Desktop/react-loto/src/pages/Loto.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Box, Grid, Alert, Button } from '@mui/material';\nimport io from 'socket.io-client';\nimport { createTickets, generateExpectedNumbers } from \"../helpers/loto\";\nimport Tickets from \"../components/loto/Tickets\";\nimport BlockOfExpectedNumbers from \"../components/loto/BlockOfExpectedNumbers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Loto() {\n  _s();\n  const result = createTickets();\n  const generatedNumbers = generateExpectedNumbers();\n  const [socket, setSocket] = useState(null);\n  const [schema] = useState(result);\n  const [clonedData, setClonedData] = useState(schema);\n  const [prevNumber, setPrevNumber] = useState(null);\n  const [intervalId, setIntervalId] = useState(null);\n  const [expectedNumbers, setExpectedNumbers] = useState(generatedNumbers);\n  const [startGame, setStartGame] = useState(false);\n  const [endGame, setEndgame] = useState(null);\n  const [connectedUsers, setConnectedUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  useEffect(() => {\n    const socket = io('http://localhost:5000');\n    setSocket(socket);\n    if (socket) {\n      const connectedUser = {\n        name: `John ${generatedNumbers[0]}`,\n        isReady: false\n      };\n      setCurrentUser(prevUser => {\n        return connectedUser;\n      });\n      socket.emit('join', connectedUser);\n    }\n    return () => {\n      socket.emit('userDisconnect', currentUser);\n      socket.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    // Listen for updates to the list of connected users\n    if (socket) {\n      socket.on('updateUsers', updatedUsers => {\n        setConnectedUsers(updatedUsers);\n      });\n    }\n\n    // Listen for user readiness\n    if (socket) {\n      socket.on('usersReady', usersReady => {\n        if (usersReady) {\n          handleStartGame();\n        }\n      });\n    }\n    if (socket) {\n      socket.on('gameOver', winner => {\n        clearInterval(intervalId);\n        setIntervalId(null);\n        setEndgame(`Game over. ${winner} won!`);\n      });\n    }\n    if (socket) {\n      socket.on('startGame', bool => {\n        setStartGame(bool);\n      });\n    }\n\n    // Cleanup function to remove event listeners when the component unmounts\n    return () => {\n      if (socket) {\n        socket.off('updateUsers');\n        socket.off('userReady');\n        socket.off('gameOver');\n      }\n    };\n  }, [socket]);\n  useEffect(() => {\n    if (startGame && !endGame) {\n      const interval = setInterval(() => {\n        setExpectedNumbers(prevNumbers => {\n          const newNumbers = [...prevNumbers];\n          const shiftedNumber = newNumbers.shift();\n          setPrevNumber(shiftedNumber);\n          return newNumbers;\n        });\n      }, 4000);\n      setIntervalId(interval);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [startGame]);\n  useEffect(() => {\n    checkNotMarkedItems();\n  }, [prevNumber]);\n  const handleStartGame = () => {\n    setStartGame(true);\n    socket.emit('startGame', true);\n  };\n  const handleReady = () => {\n    if (currentUser) {\n      const newUser = {\n        ...currentUser,\n        isReady: !currentUser.isReady\n      };\n      setCurrentUser(newUser);\n      socket.emit('ready', newUser.isReady);\n    }\n  };\n  const setSelected = cub => event => {\n    if (!startGame || endGame || !cub) return;\n    const foundCub = expectedNumbers.slice(0, 1).find(num => num === cub.num);\n    if (!foundCub) return;\n    const updatedData = clonedData.map(data => data.map(item => item.map(i => i && i.num === cub.num ? {\n      ...i,\n      selected: true\n    } : i)));\n    setClonedData(updatedData);\n  };\n  const checkNotMarkedItems = () => {\n    if (!expectedNumbers.length) {\n      setEndgame('Game over. You lose!');\n    }\n    const updatedData = clonedData.map(data => {\n      checkWinner(data);\n      return data.map(item => item.map(i => i && i.num === prevNumber && !i.selected ? {\n        ...i,\n        notMarked: true\n      } : i));\n    });\n    setClonedData(updatedData);\n  };\n  const checkWinner = data => {\n    const ticket = data.flatMap(tickets => tickets).filter(item => item);\n    const isAllItemsSelected = ticket.every(item => item && item.selected);\n    if (isAllItemsSelected) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n      setEndgame('Game over. You won!');\n\n      // Notify the backend about the winner\n      if (socket) {\n        socket.emit('winner', currentUser);\n      }\n    }\n  };\n  const renderTickets = subGrid => /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 1,\n    columns: 9,\n    sx: {\n      mb: 5\n    },\n    children: subGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(Tickets, {\n      row: row,\n      setSelected: setSelected\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 7\n  }, this);\n  const renderSchema = array => /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: array.map((subGrid, index) => /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: renderTickets(subGrid)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 5,\n        mb: 5\n      },\n      children: [!!connectedUsers ? connectedUsers.map(user => /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [user.name, \" is \", user.isReady ? 'Ready' : 'Not ready']\n      }, user.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 68\n      }, this)) : null, endGame ? /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"filled\",\n        severity: \"info\",\n        sx: {\n          mb: 5\n        },\n        children: endGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 23\n      }, this) : null, !startGame ? /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        spacing: 1,\n        columns: 3,\n        direction: \"row\",\n        justifyContent: \"center\",\n        sx: {\n          mb: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          size: \"small\",\n          onClick: handleReady,\n          children: currentUser !== null && currentUser !== void 0 && currentUser.isReady ? 'not ready' : 'ready'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(BlockOfExpectedNumbers, {\n        expectedNumbers: expectedNumbers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 23\n      }, this), renderSchema(clonedData)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n}\n_s(Loto, \"CG8sHAObTluqCzsCW3jHQPRnEqY=\");\n_c = Loto;\nvar _c;\n$RefreshReg$(_c, \"Loto\");","map":{"version":3,"names":["React","useEffect","useState","Box","Grid","Alert","Button","io","createTickets","generateExpectedNumbers","Tickets","BlockOfExpectedNumbers","jsxDEV","_jsxDEV","Fragment","_Fragment","Loto","_s","result","generatedNumbers","socket","setSocket","schema","clonedData","setClonedData","prevNumber","setPrevNumber","intervalId","setIntervalId","expectedNumbers","setExpectedNumbers","startGame","setStartGame","endGame","setEndgame","connectedUsers","setConnectedUsers","currentUser","setCurrentUser","connectedUser","name","isReady","prevUser","emit","disconnect","on","updatedUsers","usersReady","handleStartGame","winner","clearInterval","bool","off","interval","setInterval","prevNumbers","newNumbers","shiftedNumber","shift","checkNotMarkedItems","handleReady","newUser","setSelected","cub","event","foundCub","slice","find","num","updatedData","map","data","item","i","selected","length","checkWinner","notMarked","ticket","flatMap","tickets","filter","isAllItemsSelected","every","renderTickets","subGrid","container","spacing","columns","sx","mb","children","row","rowIndex","fileName","_jsxFileName","lineNumber","columnNumber","renderSchema","array","index","p","user","variant","severity","direction","justifyContent","size","onClick","_c","$RefreshReg$"],"sources":["/home/volodya-work/Desktop/react-loto/src/pages/Loto.tsx"],"sourcesContent":["import React, {MouseEvent, useEffect, useState} from 'react'\nimport {Box, Grid, Alert, Button} from '@mui/material'\nimport io from 'socket.io-client';\nimport {createTickets, generateExpectedNumbers, ICub} from \"../helpers/loto\";\nimport Tickets from \"../components/loto/Tickets\";\nimport BlockOfExpectedNumbers from \"../components/loto/BlockOfExpectedNumbers\";\n\ninterface IConnectedUser {\n    name: string\n    isReady: boolean\n}\n\nexport default function Loto() {\n    const result = createTickets()\n    const generatedNumbers = generateExpectedNumbers();\n\n    const [socket, setSocket] = useState<any>(null);\n    const [schema] = useState(result)\n    const [clonedData, setClonedData] = useState(schema)\n    const [prevNumber, setPrevNumber] = useState<number | null>(null)\n    const [intervalId, setIntervalId] = useState<any>(null);\n    const [expectedNumbers, setExpectedNumbers] = useState<number[]>(generatedNumbers);\n    const [startGame, setStartGame] = useState<boolean>(false)\n    const [endGame, setEndgame] = useState<null | string>(null)\n    const [connectedUsers, setConnectedUsers] = useState<IConnectedUser[]>([])\n    const [currentUser, setCurrentUser] = useState<IConnectedUser | null>(null)\n\n    useEffect(() => {\n        const socket = io('http://localhost:5000');\n        setSocket(socket);\n\n        if (socket) {\n            const connectedUser = {\n                name: `John ${generatedNumbers[0]}`,\n                isReady: false\n            };\n\n            setCurrentUser((prevUser) => {\n                return connectedUser;\n            });\n            socket.emit('join', connectedUser)\n        }\n        return () => {\n            socket.emit('userDisconnect', currentUser)\n            socket.disconnect();\n        };\n    }, []);\n\n    useEffect(() => {\n        // Listen for updates to the list of connected users\n        if (socket) {\n            socket.on('updateUsers', (updatedUsers: IConnectedUser[]) => {\n                setConnectedUsers(updatedUsers)\n            });\n        }\n\n        // Listen for user readiness\n        if (socket) {\n            socket.on('usersReady', (usersReady: boolean) => {\n                if (usersReady) {\n                    handleStartGame()\n                }\n            });\n        }\n\n        if (socket) {\n            socket.on('gameOver', (winner: string) => {\n                clearInterval(intervalId);\n                setIntervalId(null);\n                setEndgame(`Game over. ${winner} won!`)\n            });\n        }\n\n        if (socket) {\n            socket.on('startGame', (bool: boolean) => {\n                setStartGame(bool)\n            })\n        }\n\n        // Cleanup function to remove event listeners when the component unmounts\n        return () => {\n            if (socket) {\n                socket.off('updateUsers');\n                socket.off('userReady');\n                socket.off('gameOver');\n            }\n        };\n    }, [socket]);\n\n    useEffect(() => {\n        if (startGame && !endGame) {\n            const interval = setInterval(() => {\n                setExpectedNumbers((prevNumbers) => {\n                    const newNumbers = [...prevNumbers];\n                    const shiftedNumber = newNumbers.shift();\n\n                    setPrevNumber(shiftedNumber as number);\n                    return newNumbers;\n                });\n            }, 4000);\n\n            setIntervalId(interval);\n\n            return () => {\n                clearInterval(interval);\n            };\n        }\n    }, [startGame]);\n\n    useEffect(() => {\n        checkNotMarkedItems();\n    }, [prevNumber]);\n\n    const handleStartGame = () => {\n        setStartGame(true)\n        socket.emit('startGame', true)\n    }\n\n    const handleReady = () => {\n        if (currentUser) {\n            const newUser = {...currentUser, isReady: !currentUser.isReady}\n            setCurrentUser(newUser)\n            socket.emit('ready', newUser.isReady)\n        }\n    }\n\n    const setSelected = (cub: ICub | undefined) => (event: MouseEvent<HTMLElement>) => {\n        if (!startGame || endGame || !cub) return;\n\n        const foundCub = expectedNumbers.slice(0, 1).find((num: number) => num === (cub.num as number))\n        if (!foundCub) return;\n\n        const updatedData = clonedData.map((data: any) =>\n          data.map((item: ICub[]) =>\n            item.map((i: ICub) =>\n              i && i.num === cub.num ? {...i, selected: true} : i\n            )\n          )\n        );\n        setClonedData(updatedData)\n    }\n\n    const checkNotMarkedItems = (): void => {\n        if (!expectedNumbers.length) {\n            setEndgame('Game over. You lose!')\n        }\n\n        const updatedData = clonedData.map((data: any) => {\n            checkWinner(data)\n            return data.map((item: ICub[]) =>\n              item.map((i: ICub) =>\n                i && i.num === prevNumber && !i.selected ? {...i, notMarked: true} : i\n              )\n            )\n        });\n        setClonedData(updatedData)\n    };\n\n    const checkWinner = (data: any) => {\n        const ticket = data.flatMap((tickets: any) => tickets).filter((item: ICub) => item);\n        const isAllItemsSelected = ticket.every((item: ICub) => item && item.selected);\n\n        if (isAllItemsSelected) {\n            clearInterval(intervalId);\n            setIntervalId(null);\n            setEndgame('Game over. You won!')\n\n            // Notify the backend about the winner\n            if (socket) {\n                socket.emit('winner', currentUser);\n            }\n        }\n    };\n\n    const renderTickets = (subGrid: []) => (\n      <Grid container spacing={1} columns={9} sx={{mb: 5}}>\n          {subGrid.map((row: [], rowIndex: number) => (\n            <Tickets key={rowIndex} row={row} setSelected={setSelected}/>\n          ))}\n      </Grid>\n    );\n\n    const renderSchema = (array: any) => (\n      <Grid container spacing={2}>\n          {array.map((subGrid: [], index: number) => (\n            <Grid item key={index}>\n                {renderTickets(subGrid)}\n            </Grid>\n          ))}\n      </Grid>\n    );\n\n    return (\n      <>\n          <Box sx={{p: 5, mb: 5}}>\n              {\n                  !!connectedUsers\n                    ? connectedUsers.map((user: IConnectedUser) => <h4 key={user.name}>{user.name} is {user.isReady ? 'Ready' : 'Not ready'}</h4>)\n                    : null\n              }\n              {\n                  endGame\n                    ? <Alert variant=\"filled\" severity=\"info\" sx={{mb: 5}}>\n                        {endGame}\n                    </Alert>\n                    : null\n              }\n              {\n                  !startGame\n                    ? <Grid container item spacing={1} columns={3} direction=\"row\"\n                            justifyContent=\"center\" sx={{mb: 2}}>\n                        <Button variant=\"outlined\" size=\"small\" onClick={handleReady}>{currentUser?.isReady ? 'not ready' : 'ready'}</Button>\n                    </Grid>\n                    : <BlockOfExpectedNumbers expectedNumbers={expectedNumbers}/>\n              }\n              {renderSchema(clonedData)}\n          </Box>\n      </>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}